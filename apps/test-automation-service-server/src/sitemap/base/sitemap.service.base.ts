/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sitemap as PrismaSitemap,
  Url as PrismaUrl,
} from "@prisma/client";

export class SitemapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SitemapCountArgs, "select">): Promise<number> {
    return this.prisma.sitemap.count(args);
  }

  async sitemaps(args: Prisma.SitemapFindManyArgs): Promise<PrismaSitemap[]> {
    return this.prisma.sitemap.findMany(args);
  }
  async sitemap(
    args: Prisma.SitemapFindUniqueArgs
  ): Promise<PrismaSitemap | null> {
    return this.prisma.sitemap.findUnique(args);
  }
  async createSitemap(args: Prisma.SitemapCreateArgs): Promise<PrismaSitemap> {
    return this.prisma.sitemap.create(args);
  }
  async updateSitemap(args: Prisma.SitemapUpdateArgs): Promise<PrismaSitemap> {
    return this.prisma.sitemap.update(args);
  }
  async deleteSitemap(args: Prisma.SitemapDeleteArgs): Promise<PrismaSitemap> {
    return this.prisma.sitemap.delete(args);
  }

  async findUrls(
    parentId: string,
    args: Prisma.UrlFindManyArgs
  ): Promise<PrismaUrl[]> {
    return this.prisma.sitemap
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .urls(args);
  }
}
