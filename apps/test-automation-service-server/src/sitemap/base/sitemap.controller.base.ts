/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SitemapService } from "../sitemap.service";
import { SitemapCreateInput } from "./SitemapCreateInput";
import { Sitemap } from "./Sitemap";
import { SitemapFindManyArgs } from "./SitemapFindManyArgs";
import { SitemapWhereUniqueInput } from "./SitemapWhereUniqueInput";
import { SitemapUpdateInput } from "./SitemapUpdateInput";
import { UrlFindManyArgs } from "../../url/base/UrlFindManyArgs";
import { Url } from "../../url/base/Url";
import { UrlWhereUniqueInput } from "../../url/base/UrlWhereUniqueInput";

export class SitemapControllerBase {
  constructor(protected readonly service: SitemapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sitemap })
  async createSitemap(
    @common.Body() data: SitemapCreateInput
  ): Promise<Sitemap> {
    return await this.service.createSitemap({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sitemap] })
  @ApiNestedQuery(SitemapFindManyArgs)
  async sitemaps(@common.Req() request: Request): Promise<Sitemap[]> {
    const args = plainToClass(SitemapFindManyArgs, request.query);
    return this.service.sitemaps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sitemap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sitemap(
    @common.Param() params: SitemapWhereUniqueInput
  ): Promise<Sitemap | null> {
    const result = await this.service.sitemap({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sitemap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSitemap(
    @common.Param() params: SitemapWhereUniqueInput,
    @common.Body() data: SitemapUpdateInput
  ): Promise<Sitemap | null> {
    try {
      return await this.service.updateSitemap({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sitemap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSitemap(
    @common.Param() params: SitemapWhereUniqueInput
  ): Promise<Sitemap | null> {
    try {
      return await this.service.deleteSitemap({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/urls")
  @ApiNestedQuery(UrlFindManyArgs)
  async findUrls(
    @common.Req() request: Request,
    @common.Param() params: SitemapWhereUniqueInput
  ): Promise<Url[]> {
    const query = plainToClass(UrlFindManyArgs, request.query);
    const results = await this.service.findUrls(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        sitemap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/urls")
  async connectUrls(
    @common.Param() params: SitemapWhereUniqueInput,
    @common.Body() body: UrlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      urls: {
        connect: body,
      },
    };
    await this.service.updateSitemap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/urls")
  async updateUrls(
    @common.Param() params: SitemapWhereUniqueInput,
    @common.Body() body: UrlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      urls: {
        set: body,
      },
    };
    await this.service.updateSitemap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/urls")
  async disconnectUrls(
    @common.Param() params: SitemapWhereUniqueInput,
    @common.Body() body: UrlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      urls: {
        disconnect: body,
      },
    };
    await this.service.updateSitemap({
      where: params,
      data,
      select: { id: true },
    });
  }
}
