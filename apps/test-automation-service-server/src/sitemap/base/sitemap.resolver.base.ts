/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sitemap } from "./Sitemap";
import { SitemapCountArgs } from "./SitemapCountArgs";
import { SitemapFindManyArgs } from "./SitemapFindManyArgs";
import { SitemapFindUniqueArgs } from "./SitemapFindUniqueArgs";
import { CreateSitemapArgs } from "./CreateSitemapArgs";
import { UpdateSitemapArgs } from "./UpdateSitemapArgs";
import { DeleteSitemapArgs } from "./DeleteSitemapArgs";
import { UrlFindManyArgs } from "../../url/base/UrlFindManyArgs";
import { Url } from "../../url/base/Url";
import { SitemapService } from "../sitemap.service";
@graphql.Resolver(() => Sitemap)
export class SitemapResolverBase {
  constructor(protected readonly service: SitemapService) {}

  async _sitemapsMeta(
    @graphql.Args() args: SitemapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sitemap])
  async sitemaps(
    @graphql.Args() args: SitemapFindManyArgs
  ): Promise<Sitemap[]> {
    return this.service.sitemaps(args);
  }

  @graphql.Query(() => Sitemap, { nullable: true })
  async sitemap(
    @graphql.Args() args: SitemapFindUniqueArgs
  ): Promise<Sitemap | null> {
    const result = await this.service.sitemap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sitemap)
  async createSitemap(
    @graphql.Args() args: CreateSitemapArgs
  ): Promise<Sitemap> {
    return await this.service.createSitemap({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Sitemap)
  async updateSitemap(
    @graphql.Args() args: UpdateSitemapArgs
  ): Promise<Sitemap | null> {
    try {
      return await this.service.updateSitemap({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sitemap)
  async deleteSitemap(
    @graphql.Args() args: DeleteSitemapArgs
  ): Promise<Sitemap | null> {
    try {
      return await this.service.deleteSitemap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Url], { name: "urls" })
  async findUrls(
    @graphql.Parent() parent: Sitemap,
    @graphql.Args() args: UrlFindManyArgs
  ): Promise<Url[]> {
    const results = await this.service.findUrls(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
