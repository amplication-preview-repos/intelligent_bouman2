/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UrlService } from "../url.service";
import { UrlCreateInput } from "./UrlCreateInput";
import { Url } from "./Url";
import { UrlFindManyArgs } from "./UrlFindManyArgs";
import { UrlWhereUniqueInput } from "./UrlWhereUniqueInput";
import { UrlUpdateInput } from "./UrlUpdateInput";
import { TestResultFindManyArgs } from "../../testResult/base/TestResultFindManyArgs";
import { TestResult } from "../../testResult/base/TestResult";
import { TestResultWhereUniqueInput } from "../../testResult/base/TestResultWhereUniqueInput";

export class UrlControllerBase {
  constructor(protected readonly service: UrlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Url })
  async createUrl(@common.Body() data: UrlCreateInput): Promise<Url> {
    return await this.service.createUrl({
      data: {
        ...data,

        sitemap: data.sitemap
          ? {
              connect: data.sitemap,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        sitemap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Url] })
  @ApiNestedQuery(UrlFindManyArgs)
  async urls(@common.Req() request: Request): Promise<Url[]> {
    const args = plainToClass(UrlFindManyArgs, request.query);
    return this.service.urls({
      ...args,
      select: {
        createdAt: true,
        id: true,

        sitemap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Url })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async url(@common.Param() params: UrlWhereUniqueInput): Promise<Url | null> {
    const result = await this.service.url({
      where: params,
      select: {
        createdAt: true,
        id: true,

        sitemap: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Url })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUrl(
    @common.Param() params: UrlWhereUniqueInput,
    @common.Body() data: UrlUpdateInput
  ): Promise<Url | null> {
    try {
      return await this.service.updateUrl({
        where: params,
        data: {
          ...data,

          sitemap: data.sitemap
            ? {
                connect: data.sitemap,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          sitemap: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Url })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUrl(
    @common.Param() params: UrlWhereUniqueInput
  ): Promise<Url | null> {
    try {
      return await this.service.deleteUrl({
        where: params,
        select: {
          createdAt: true,
          id: true,

          sitemap: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/testResults")
  @ApiNestedQuery(TestResultFindManyArgs)
  async findTestResults(
    @common.Req() request: Request,
    @common.Param() params: UrlWhereUniqueInput
  ): Promise<TestResult[]> {
    const query = plainToClass(TestResultFindManyArgs, request.query);
    const results = await this.service.findTestResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        result: true,
        runAt: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/testResults")
  async connectTestResults(
    @common.Param() params: UrlWhereUniqueInput,
    @common.Body() body: TestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      testResults: {
        connect: body,
      },
    };
    await this.service.updateUrl({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/testResults")
  async updateTestResults(
    @common.Param() params: UrlWhereUniqueInput,
    @common.Body() body: TestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      testResults: {
        set: body,
      },
    };
    await this.service.updateUrl({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/testResults")
  async disconnectTestResults(
    @common.Param() params: UrlWhereUniqueInput,
    @common.Body() body: TestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      testResults: {
        disconnect: body,
      },
    };
    await this.service.updateUrl({
      where: params,
      data,
      select: { id: true },
    });
  }
}
