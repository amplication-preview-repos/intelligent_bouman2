/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Url as PrismaUrl,
  TestResult as PrismaTestResult,
  Sitemap as PrismaSitemap,
} from "@prisma/client";

export class UrlServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UrlCountArgs, "select">): Promise<number> {
    return this.prisma.url.count(args);
  }

  async urls(args: Prisma.UrlFindManyArgs): Promise<PrismaUrl[]> {
    return this.prisma.url.findMany(args);
  }
  async url(args: Prisma.UrlFindUniqueArgs): Promise<PrismaUrl | null> {
    return this.prisma.url.findUnique(args);
  }
  async createUrl(args: Prisma.UrlCreateArgs): Promise<PrismaUrl> {
    return this.prisma.url.create(args);
  }
  async updateUrl(args: Prisma.UrlUpdateArgs): Promise<PrismaUrl> {
    return this.prisma.url.update(args);
  }
  async deleteUrl(args: Prisma.UrlDeleteArgs): Promise<PrismaUrl> {
    return this.prisma.url.delete(args);
  }

  async findTestResults(
    parentId: string,
    args: Prisma.TestResultFindManyArgs
  ): Promise<PrismaTestResult[]> {
    return this.prisma.url
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .testResults(args);
  }

  async getSitemap(parentId: string): Promise<PrismaSitemap | null> {
    return this.prisma.url
      .findUnique({
        where: { id: parentId },
      })
      .sitemap();
  }
}
